// Generated by gencpp from file ford_msgs/NNActions.msg
// DO NOT EDIT!


#ifndef FORD_MSGS_MESSAGE_NNACTIONS_H
#define FORD_MSGS_MESSAGE_NNACTIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>

namespace ford_msgs
{
template <class ContainerAllocator>
struct NNActions_
{
  typedef NNActions_<ContainerAllocator> Type;

  NNActions_()
    : header()
    , angles()
    , max_speeds()
    , subgoal()
    , path_lengths()
    , current_cost_to_go(0.0)  {
    }
  NNActions_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angles(_alloc)
    , max_speeds(_alloc)
    , subgoal(_alloc)
    , path_lengths(_alloc)
    , current_cost_to_go(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _max_speeds_type;
  _max_speeds_type max_speeds;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _subgoal_type;
  _subgoal_type subgoal;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _path_lengths_type;
  _path_lengths_type path_lengths;

   typedef float _current_cost_to_go_type;
  _current_cost_to_go_type current_cost_to_go;





  typedef boost::shared_ptr< ::ford_msgs::NNActions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ford_msgs::NNActions_<ContainerAllocator> const> ConstPtr;

}; // struct NNActions_

typedef ::ford_msgs::NNActions_<std::allocator<void> > NNActions;

typedef boost::shared_ptr< ::ford_msgs::NNActions > NNActionsPtr;
typedef boost::shared_ptr< ::ford_msgs::NNActions const> NNActionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ford_msgs::NNActions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ford_msgs::NNActions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ford_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ford_msgs': ['/home/wangqiang/catkin_ws/src/cadrl_ros_gazebo_demo/ford_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ford_msgs::NNActions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ford_msgs::NNActions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ford_msgs::NNActions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ford_msgs::NNActions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ford_msgs::NNActions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ford_msgs::NNActions_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ford_msgs::NNActions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baed85cab20cbff17eb30c95cd61ef93";
  }

  static const char* value(const ::ford_msgs::NNActions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbaed85cab20cbff1ULL;
  static const uint64_t static_value2 = 0x7eb30c95cd61ef93ULL;
};

template<class ContainerAllocator>
struct DataType< ::ford_msgs::NNActions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ford_msgs/NNActions";
  }

  static const char* value(const ::ford_msgs::NNActions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ford_msgs::NNActions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
float32[] angles\n\
float32[] max_speeds\n\
geometry_msgs/Pose2D subgoal\n\
float32[] path_lengths\n\
float32 current_cost_to_go\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# Deprecated\n\
# Please use the full 3D pose.\n\
\n\
# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\
\n\
# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n\
\n\
\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::ford_msgs::NNActions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ford_msgs::NNActions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angles);
      stream.next(m.max_speeds);
      stream.next(m.subgoal);
      stream.next(m.path_lengths);
      stream.next(m.current_cost_to_go);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NNActions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ford_msgs::NNActions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ford_msgs::NNActions_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "max_speeds[]" << std::endl;
    for (size_t i = 0; i < v.max_speeds.size(); ++i)
    {
      s << indent << "  max_speeds[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max_speeds[i]);
    }
    s << indent << "subgoal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.subgoal);
    s << indent << "path_lengths[]" << std::endl;
    for (size_t i = 0; i < v.path_lengths.size(); ++i)
    {
      s << indent << "  path_lengths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.path_lengths[i]);
    }
    s << indent << "current_cost_to_go: ";
    Printer<float>::stream(s, indent + "  ", v.current_cost_to_go);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FORD_MSGS_MESSAGE_NNACTIONS_H
